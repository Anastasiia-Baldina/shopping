services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: appdb
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - shopaholic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    container_name: zookeeper
    networks:
      - shopaholic-network
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    image: docker.io/bitnami/kafka:3.7
    networks:
      - shopaholic-network
    container_name: kafka
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-setup:
    image: docker.io/bitnami/kafka:3.7
    container_name: kafka-setup
    networks:
      - shopaholic-network
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    command: >
      bash -c "
      echo 'Waiting for Kafka to be ready...' &&
      sleep 10 &&
      echo 'Creating topics...' &&
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic order_push --partitions 4 --replication-factor 1 &&
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic pay_request --partitions 4 --replication-factor 1 &&
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic pay_response --partitions 4 --replication-factor 1 &&
      echo 'Topics created successfully!'
      "
    restart: on-failure

  api-gateway:
    build:
      context: .
      dockerfile: docker/api-gateway.Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "8081:8080"
    container_name: api-gateway
    networks:
      - shopaholic-network
    depends_on:
      order-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully

  order-service:
    build:
      context: .
      dockerfile: docker/order-service.Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - shopaholic-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
    deploy:
      replicas: 2

  payment-service:
    build:
      context: .
      dockerfile: docker/payment-service.Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - shopaholic-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
    deploy:
      replicas: 2

  shop-web:
    container_name: shop-web
    build:
      context: .
      dockerfile: docker/shop-web.Dockerfile
    ports:
      - "8080:8080"
    networks:
      - shopaholic-network
    depends_on:
      api-gateway:
        condition: service_healthy

volumes:
  postgres_data:
  kafka_data:
  zookeeper_data:

networks:
  shopaholic-network:
    driver: bridge
    name: shopaholic-network