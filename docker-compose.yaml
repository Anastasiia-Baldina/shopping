version: '3.8'

services:
  # PostgreSQL (без изменений)
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: appdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Kafka с предсозданными топиками
  kafka:
    image: apache/kafka:3.7.0
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
    ports:
      - "29092:29092"
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
      - ./kafka-scripts:/opt/kafka/init-scripts
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      bash -c "
      /etc/confluent/docker/configure &&
      /etc/confluent/docker/launch &
      sleep 30 &&
      /opt/kafka/init-scripts/create-topics.sh &&
      wait
      "

  # Сервисы с масштабированием
  api-gateway:
    build:
      context: .
      dockerfile: docker/api-gateway.Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/appdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  order-service:
    build:
      context: .
      dockerfile: docker/order-service.Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/appdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: order-service-group
    networks:
      - app-network
    deploy:
      replicas: 2

  payment-service:
    build:
      context: .
      dockerfile: docker/payment-service.Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/appdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: payment-service-group
    networks:
      - app-network
    deploy:
      replicas: 2

  shop-web:
    build:
      context: .
      dockerfile: docker/shop-web.Dockerfile
    ports:
      - "8083:8080"
    networks:
      - app-network

volumes:
  postgres_data:
  kafka_data:

networks:
  app-network:
    driver: bridge